[["index.html", "미적분학 데이터과학을 위한 미적분학 선수 과목", " 미적분학 데이터과학을 위한 미적분학 이광춘 Tidyverse Korea2021-01-23 선수 과목 미적분학을 학습하는데 필요한 사전 선수 지식에 대한 내용을 정리합니다. 미적분학을 KCD 2020 소개하게 되서 영광입니다. "],["equation-to-graph.html", "Chapter 1 수식  그래프1 1.1 지수함수 그래프 (Kittler 2019) 1.2 간단한 함수 1.3 지수와 로그 함수 1.4 다양한 활성화 함수 1.5 삼각 함수", " Chapter 1 수식  그래프1 1.1 지수함수 그래프 (Kittler 2019) 지수함수를 -10에서 10까지 그래프를 그려 시각화한다. \\[y=\\exp(x)\\] 수식을 geom_function()에 넣고 정의역을 scale_x_continuous()에 넣게 되면 해당 정의역 -10 ~ +10까지 그래프로 시각화를 한다. library(tidyverse) # exp_tbl &lt;- expand_grid(x_range = -10:10) # # exp_tbl %&gt;% # ggplot(aes(x_range)) + # geom_density() + # geom_function(fun = function(x) exp(x)) ggplot() + geom_density() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) exp(x) ) + theme_light() + labs(x=&quot;&quot;, y=&quot;&quot;) 1.2 간단한 함수 간단한 10개의 함수를 ggplot 함수를 사용해서 시각화할 수 있다. geom_function 에 수학 함수를 수학표현식으로 고쳐 작성한다. 그리고, latex2exp를 사용해서 간단한 \\(LaTeX\\) 수식을 ggplot에 수식으로 표현하여 넣는다. 10개의 수식 그래프를 patchwork를 사용하여 한자의 그래프로 그려 넣는다. \\(y = x\\) \\(y = |x|\\) \\(y = x^2\\) \\(y = x^3\\) \\(y = x^4\\) \\(y = x^5\\) \\(y = \\sqrt{x}\\) \\(y = \\sqrt[3]{x}\\) \\(y = \\frac{1}{x}\\) \\(y = \\frac{1}{x^2}\\) library(patchwork) library(latex2exp) theme_set(theme_minimal()) simple_eq_01 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x, color=&quot;red&quot; ) + labs(title = TeX(c(&quot;y=x&quot;))) simple_eq_02 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) abs(x), color=&quot;blue&quot; ) + labs(title = TeX(c(&quot;y=|x|&quot;))) simple_eq_03 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^2, color=&quot;orange&quot; ) + labs(title = TeX(c(&quot;y=x^2&quot;))) simple_eq_04 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^3, color=&quot;black&quot; ) + labs(title = TeX(c(&quot;y=x^3&quot;))) simple_eq_05 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^4, color=&quot;darkgray&quot; ) + labs(title = TeX(c(&quot;y=x^4&quot;))) simple_eq_06 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^5, color=&quot;midnightblue&quot; ) + labs(title = TeX(c(&quot;y=x^5&quot;))) simple_eq_07 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^(1/2), color=&quot;pink&quot; ) + labs(title = TeX(c(&quot;y = \\\\sqrt[2]_{x}&quot;))) simple_eq_08 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x^(1/3), color=&quot;violet&quot; ) + labs(title = TeX(c(&quot;$y = \\\\sqrt[3]_{x}$&quot;))) simple_eq_09 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 1 / x, color=&quot;gray50&quot; ) + labs(title = TeX(c(&quot;$y = \\\\frac{1}{x}$&quot;))) simple_eq_10 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 1 / (x)^2, color=&quot;yellow&quot; ) + labs(title = TeX(c(&quot;$y = \\\\frac{1}{x^2}$&quot;))) ( simple_eq_01 + simple_eq_02 ) / ( simple_eq_03 + simple_eq_04 ) / ( simple_eq_05 + simple_eq_06 ) / ( simple_eq_07 + simple_eq_08 ) / ( simple_eq_09 + simple_eq_10 ) 1.3 지수와 로그 함수 다양한 지수와 로그 함수를 시각화해보자. \\(y = x!\\) \\(y = 2^x\\) \\(y = \\frac{1}{\\sqrt{x}}\\) \\(y = exp(-x)\\) \\(y = log(x)\\) \\(y = log_2 (x)\\) \\(y = log_{10} (x)\\) \\(y = x \\times log(x)\\) \\(y = exp(x)\\) \\(y = log(x)^2\\) simple_eq_11 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) factorial(x), color=&quot;red&quot; ) + labs(title = TeX(c(&quot;y=x!&quot;))) simple_eq_12 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 2^x, color=&quot;blue&quot; ) + labs(title = TeX(c(&quot;y=2^x&quot;))) simple_eq_13 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 1 / sqrt(x), color=&quot;orange&quot; ) + labs(title = TeX(c(&quot;y=\\\\frac{1}{\\\\sqrt{x}}&quot;))) simple_eq_14 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) exp(-x), color=&quot;black&quot; ) + labs(title = TeX(c(&quot;y=exp(-x)&quot;))) simple_eq_15 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) log(x), color=&quot;darkgray&quot; ) + labs(title = TeX(c(&quot;y=log(x)&quot;))) simple_eq_16 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) log2(x), color=&quot;midnightblue&quot; ) + labs(title = TeX(c(&quot;y=log_2 (x)&quot;))) simple_eq_17 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) log10(x), color=&quot;pink&quot; ) + labs(title = TeX(c(&quot;y = log_{10} (x)&quot;))) simple_eq_18 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) x * log(x), color=&quot;violet&quot; ) + labs(title = TeX(c(&quot;$y = x log(x)&quot;))) simple_eq_19 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) exp(x), color=&quot;gray50&quot; ) + labs(title = TeX(c(&quot;$y = exp(x)$&quot;))) simple_eq_10 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) log(x)^2, color=&quot;yellow&quot; ) + labs(title = TeX(c(&quot;$y = log(x)^2&quot;))) ( simple_eq_11 + simple_eq_12 ) / ( simple_eq_13 + simple_eq_14 ) / ( simple_eq_15 + simple_eq_16 ) / ( simple_eq_17 + simple_eq_18 ) / ( simple_eq_19 + simple_eq_10 ) 1.4 다양한 활성화 함수 다양한 활성화(activation) 함수를 시각화해보자. \\(y = \\frac{1}{1+exp(-x)} : Sigmoid Function\\) \\(y = \\frac{10}{1+exp(-x)} : 10 X Sigmoid Function\\) \\(y = tanh(x)\\) \\(y = \\frac{exp(x)}{\\sum{exp(x)}} : Softmax\\) \\(y = rectifier(x)\\) \\(y= softplus(x)\\) \\(y = sign(x)\\) \\(y = floor(x)\\) \\(y = round(x)\\) \\(y = ceiling(x)\\) simple_eq_21 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 1 / (1 + exp(-x)), color=&quot;red&quot; ) + labs(title = TeX(c(&quot;y=\\\\frac{1}{1+exp(-x)} : Sigmoid Function&quot;))) simple_eq_22 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) 10 / (1 + exp(-x)), color=&quot;blue&quot; ) + labs(title = TeX(c(&quot;y = \\\\frac{10}{1+exp(-x)} : 10 X Sigmoid Function&quot;))) simple_eq_23 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) tanh(x), color=&quot;orange&quot; ) + labs(title = TeX(c(&quot;y= tanh(x)&quot;))) simple_eq_24 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) exp(x) / sum(exp(x)), color=&quot;black&quot; ) + labs(title = TeX(c(&quot;y = \\\\frac{exp(x)}{\\\\sum{exp(x)}} : Softmax&quot;))) simple_eq_25 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) pmax(0, x), color=&quot;darkgray&quot; ) + labs(title = TeX(c(&quot;y = rectifier(x)&quot;))) simple_eq_26 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) log(1 + exp(x)), color=&quot;midnightblue&quot; ) + labs(title = TeX(c(&quot;y= softplus(x)&quot;))) simple_eq_27 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) sign(x), color=&quot;pink&quot; ) + labs(title = TeX(c(&quot;y = sign(x)&quot;))) simple_eq_28 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) floor(x), color=&quot;violet&quot; ) + labs(title = TeX(c(&quot;$y = floor(x)&quot;))) simple_eq_29 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) round(x), color=&quot;gray50&quot; ) + labs(title = TeX(c(&quot;$y = round(x)$&quot;))) simple_eq_30 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) ceiling(x), color=&quot;yellow&quot; ) + labs(title = TeX(c(&quot;$y = ceiling(x)&quot;))) ( simple_eq_21 + simple_eq_22 ) / ( simple_eq_23 + simple_eq_24 ) / ( simple_eq_25 + simple_eq_26 ) / ( simple_eq_27 + simple_eq_28 ) / ( simple_eq_29 + simple_eq_30 ) 1.5 삼각 함수 다양한 삼각(trigonometric) 함수를 시각화해보자. \\(y = sin(x)\\) \\(y = sin(pi*x)\\) \\(y= sinh(x)\\) \\(y = asinh(x)\\) \\(y = cos(x)\\) \\(y = cospi(x)\\) \\(y = cosh(x)\\) \\(y = acosh(x)\\) \\(y = tan(x)\\) \\(y = tanpi(x)\\) simple_eq_31 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) sin(x), color=&quot;red&quot; ) + labs(title = TeX(c(&quot;y = sin(x)&quot;))) simple_eq_32 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) sinpi(x), color=&quot;blue&quot; ) + labs(title = TeX(c(&quot;y = sin(pi*x)&quot;))) simple_eq_33 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) sinh(x), color=&quot;orange&quot; ) + labs(title = TeX(c(&quot;y= sinh(x)&quot;))) simple_eq_34 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) asinh(x), color=&quot;black&quot; ) + labs(title = TeX(c(&quot;y = asinh(x)&quot;))) simple_eq_35 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) cos(x), color=&quot;darkgray&quot; ) + labs(title = TeX(c(&quot;y = cos(x)&quot;))) simple_eq_36 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) cospi(x), color=&quot;midnightblue&quot; ) + labs(title = TeX(c(&quot;y = cospi(x)&quot;))) simple_eq_37 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) cosh(x), color=&quot;pink&quot; ) + labs(title = TeX(c(&quot;y = cosh(x)&quot;))) simple_eq_38 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) acosh(x), color=&quot;violet&quot; ) + labs(title = TeX(c(&quot;$y = acosh(x)&quot;))) simple_eq_39 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) tan(x), color=&quot;gray50&quot; ) + labs(title = TeX(c(&quot;$y = tan(x)$&quot;))) simple_eq_40 &lt;- ggplot() + scale_x_continuous(limits = c(-10,10)) + geom_function(fun = function(x) tanpi(x), color=&quot;yellow&quot; ) + labs(title = TeX(c(&quot;$y = tanpi(x)&quot;))) ( simple_eq_31 + simple_eq_32 ) / ( simple_eq_33 + simple_eq_34 ) / ( simple_eq_35 + simple_eq_36 ) / ( simple_eq_37 + simple_eq_38 ) / ( simple_eq_39 + simple_eq_40 ) References "],["prime-factorization.html", "Chapter 2 소인수 분해 2.1 소인수 분해 알고리즘", " Chapter 2 소인수 분해 div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} 용어 정리 소수 (Prime Number): 1 과 자기자신 외 다른 수로는 나누어지지 않는, 1보다 큰 자연수(양의 정수) 합성수 (Composite Number): 소수가 아닌 수 1 과 자기 자신이 아닌 다른 양의 정수의 곱으로 나타낼 수 있는 양의 정수 소인수 (Prime Factor): 임의 자연수를 나누어 떨어뜨리는 약수들 중 소수인 것 서로소 (Coprime, Relatively Prime): 두 정수의 공약수가 1 뿐일 때 2.1 소인수 분해 알고리즘 소인수 분해 알고리즘은 말 그대로, 어떤 자연수 \\(N\\) 을 소수의 곱으로 나타내는 것을 목표로 한다. 쉽게 설명하기 위해서 자연수 \\(N\\)이 두 개의 소수 \\(p,q\\)의 곱으로 이루어져 있다고 가정해 보겠다. 우리의 목표는 \\(N\\)이 주어졌을 때 \\(p\\)와 \\(q\\)를 빠른 시간 안에 알아내는 것이다. 가장 쉽게 시도해 볼 수 있는 방법은 일일이 소수를 하나씩 대입해서 \\(N\\)이 그 소수로 나누어지는지 확인해 보는 것이다.(김한영 2020) 2.1.1 소인수 판정 Prime number function in R을 참조하여 자연수가 소인수인지 판정할 수 있다. 소인수 판정 알고리즘은 판정하고자 하는 자연수 \\(N\\)을 2 ~ \\(N-1\\)까지 나눠서 나눠지게 되면 소인수가 아니고 나눠지지 않는 경우는 소인수로 판정하는 것이다. 여기서 %% 몫은 버리고 나머지만 취하는 연산자. 즉, 10을 3으로 나누면 나머지가 1이 된다. 이를 10 %% 3 작성하게 되면 1 가 된다. is_prime &lt;- function(num) { if (num == 2) { TRUE } else if (any(num %% 2:(num-1) == 0)) { FALSE } else { TRUE } } is_prime(3) [1] TRUE 예를 들어 1 ~ 100까지 자연수가 있는데 자연수 각각이 소인수인지 판정하는 반복연산을 함수형 프로그래밍으로 구현하면 다음과 같다. library(tidyverse) natural_number &lt;- 1:100 prime_number_decision &lt;- map_lgl(natural_number, is_prime) tibble(자연수 = natural_number, 소수판정 = prime_number_decision) %&gt;% reactable::reactable() 상기 작업을 함수로 만들어 특정 자연수 \\(N\\)을 넣게 되면 해당 자연수 \\(N\\)까지 자연수인지 판정하는 함수를 작성해보자. reactable 색상기능을 동원하여 소인수와 합성수를 명확히 한다. library(reactable) calculate_primes &lt;- function(number) { natural_number &lt;- 1:number prime_number_decision &lt;- map_lgl(natural_number, is_prime) tibble(자연수 = natural_number, 소수판정 = prime_number_decision) %&gt;% reactable::reactable(columns = list( 소수판정 = colDef( cell = function(value) { if (value == TRUE ) paste0(&quot;&quot;, value) else value }, style = function(value) { color &lt;- if (value == TRUE) { &quot;#008000&quot; } else{ &quot;#e00000&quot; } list(fontWeight = 600, color = color) } ) )) } calculate_primes(10) 2.1.2 소인수 판정 시각화 소인수와 소인수가 아닌 것을 시각화하여 보자. ## 소수 판정 데이터프레임 generate_primes &lt;- function(number) { natural_number &lt;- 1:number prime_number_decision &lt;- map_lgl(natural_number, is_prime) decide_prime_tbl &lt;- tibble(자연수 = natural_number, 소수판정 = prime_number_decision %&gt;% as.integer + 1) return(decide_prime_tbl) } prime_tbl &lt;- generate_primes(10) ## 시각화를 위한 데이터프레임 lines &lt;- tibble(number = prime_tbl %&gt;% pull(`자연수`), x = seq(1, 10, by = 1), xend = x, y = rep(0, 10), yend = prime_tbl %&gt;% pull(`소수판정`)) dots &lt;- lines %&gt;% select(x, yend) ## 시각화 ---- lines %&gt;% ggplot() + geom_segment(aes(x = x, xend = xend, y = y, yend = yend), color = &quot;white&quot;) + geom_text(aes(x = x, y = yend + 0.2, label = number), color = &quot;blue&quot;) + geom_point(data = dots, aes(x = x, y = yend), color = &quot;white&quot;) + coord_polar() + ylim(-0.5, 3) + coord_polar() + theme( plot.background = element_rect( fill = &quot;#75926f&quot;), panel.background = element_rect( fill = &quot;#75926f&quot;), panel.grid = element_blank(), plot.caption = element_text( family = &quot;Open Sans&quot;, size = 6, color = &quot;white&quot;), axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank() ) 소인수와 소인수가 아닌 것을 극좌표계에 시각화하는 함수를 만들어보자. 즉, 특정 숫자를 넣으면 극좌표계를 사용해서 소수와 소수가 아닌 것을 길이를 달리해서 표현하게 된다. generate_primes &lt;- function(number) { natural_number &lt;- 1:number prime_number_decision &lt;- map_lgl(natural_number, is_prime) decide_prime_tbl &lt;- tibble(자연수 = natural_number, 소수판정 = prime_number_decision %&gt;% as.integer + 1) return(decide_prime_tbl) } visualize_prime &lt;- function(number) { # 시각화를 위한 데이터프레임 prime_tbl &lt;- generate_primes(number) graph_tbl &lt;- tibble( natural_number = prime_tbl %&gt;% pull(`자연수`), x = seq(1, number, by = 1), xend = x, y = rep(0, number), yend = prime_tbl %&gt;% pull(`소수판정`) ) dots &lt;- lines %&gt;% select(x, yend) ## 시각화 ---- graph_tbl %&gt;% ggplot() + geom_segment(aes(x = x, xend = xend, y = y, yend = yend), color = &quot;white&quot;) + geom_text(aes(x = x, y = yend + 0.2, label = natural_number), color = &quot;blue&quot;) + geom_point(data = dots, aes(x = x, y = yend), color = &quot;white&quot;) + coord_polar() + ylim(-0.5, 3) + coord_polar() + theme( plot.background = element_rect( fill = &quot;#75926f&quot;), panel.background = element_rect( fill = &quot;#75926f&quot;), panel.grid = element_blank(), plot.caption = element_text( family = &quot;Open Sans&quot;, size = 6, color = &quot;white&quot;), axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank() ) + labs(title = glue::glue(&quot;1 부터 {number} 까지 소수판정 예술그림&quot;)) } visualize_prime(77) References "],["draw-math-diagram.html", "Chapter 3 수학 도형 그리기 3.1 삼각형 3.2 사각형 3.3 원(circle) 3.4 선(line) 3.5 일반화", " Chapter 3 수학 도형 그리기 3.1 삼각형 수학그래프를 그리는 방법을 살펴보자. 먼저 각 점을 데이터프레임으로 만들고 나서 ggplot으로 시각화한다. geom_polygon() 함수를 사용해서 각 점을 연결시키고 설명을 넣기 위해 각 꼭지점에 대해 라벨 표식을 위해 point 변수를 넣고 geom_text() 함수로 준비한 라벨을 붙여 삼각형에 대해 이해를 쉽게 돕는다. library(tidyverse) triangle_tbl &lt;- tibble(coord_x = c(2,4,4), coord_y = c(1,1,3), group = c(1,1,1), point = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)) %&gt;% mutate(point = glue::glue(&quot;{point}, ({coord_x}, {coord_y})&quot;)) triangle_tbl %&gt;% ggplot(aes(x = coord_x, y = coord_y, group = group, label = point)) + geom_point(size = 2, color = &quot;red&quot;) + geom_polygon(fill =&quot;midnightblue&quot;) + geom_text(vjust = 1, hjust= 0.5, size = 5) + theme_void() 3.2 사각형 사각형은 ggplot에서 먼저 4개의 좌표가 필요하여 이를 데이터프레임으로 제작하고 나서 geom_rect() 함수를 사용해서 시각화한다. rect_tbl &lt;- tibble(bottom_left = 1, bottom_right = 3, top_left = 1, top_right = 3) rect_point_tbl &lt;- rect_tbl %&gt;% select(contains(&quot;left&quot;)) %&gt;% rename(x=bottom_left, y=top_left) %&gt;% bind_rows( rect_tbl %&gt;% select(contains(&quot;right&quot;)) %&gt;% rename(x=bottom_right, y=top_right) ) %&gt;% mutate(point = c(&quot;A&quot;, &quot;D&quot;)) %&gt;% mutate(point = glue::glue(&quot;{point}:({x},{y})&quot;)) ggplot() + geom_rect(data = rect_tbl, aes(xmin=bottom_left, xmax=bottom_right, ymin=top_left, ymax=top_right, fill=&quot;red&quot;), color=&quot;black&quot;, alpha=0.5) + geom_point(data = rect_point_tbl, mapping=aes(x=x, y=y), size = 2, color = &quot;red&quot;) + geom_polygon(fill =&quot;midnightblue&quot;) + geom_text(data = rect_point_tbl, mapping=aes(x=x, y=y, label = point), vjust = 1, hjust= 0.5, size = 5) + theme_void() + theme(legend.position = &quot;none&quot;) 3.3 원(circle) ggforce 팩키지 geom_circle() 함수를 사용하면 직관적으로 \\((x, y)\\) 위치에 반지름 \\(r\\)인 원을 그릴 수 있다. library(ggforce) circle_tbl &lt;- tibble(x_pos = 1, y_pos = 1) %&gt;% mutate(center = glue::glue(&quot;중심:({x_pos},{y_pos})&quot;)) circle_tbl %&gt;% ggplot(aes(x_pos, y_pos)) + geom_circle(aes(x0 = 1, y0 = 1, r = 1), inherit.aes = FALSE) + geom_point(size = 2, color = &quot;red&quot;) + geom_text(aes(label = center), vjust = 1.5, hjust= 0.5, size = 5) + coord_fixed(ratio = 1) + theme_void() + theme(legend.position = &quot;none&quot;) 3.4 선(line) geom_segment() 함수를 사용해서 직선을 ggplot으로 그릴 수 있다. line_tbl &lt;- tibble(x = c(1, 3), y = c(1, 2)) %&gt;% mutate(point = glue::glue(&quot;점:({x}, {y})&quot;)) line_tbl %&gt;% ggplot(aes(x, y, label = point)) + geom_segment(aes(x = line_tbl %&gt;% select(x) %&gt;% slice(1) %&gt;% pull, y = line_tbl %&gt;% select(y) %&gt;% slice(1) %&gt;% pull, xend = line_tbl %&gt;% select(x) %&gt;% slice(2) %&gt;% pull, yend = line_tbl %&gt;% select(y) %&gt;% slice(2) %&gt;% pull), size = 2, linetype = 1, color = &quot;midnightblue&quot;) + geom_point(size = 3, color = &quot;red&quot;) + geom_text(vjust = 1.5, hjust= 0.5, size = 5) + coord_fixed(ratio = 1) + theme_void() + theme(legend.position = &quot;none&quot;) 3.5 일반화 함수를 사용해서 점의 위치를 지정하면 도형을 그릴 수 있도록 해보자. \\(x\\), \\(y\\) 원의 중심을 특정하고 반지름 \\(r\\)을 넣게 되면 이를 바로 원을 그릴 수 있는 함수를 작성하여 시각화한다. draw_circle &lt;- function(x_pos, y_pos, radius) { circle_tbl &lt;- tibble(x_pos = x_pos, y_pos = y_pos) %&gt;% mutate(center = glue::glue(&quot;중심:({x_pos},{y_pos})&quot;), radius = radius) circle_tbl %&gt;% ggplot(aes(x_pos, y_pos)) + geom_circle(aes(x0 = x_pos, y0 = y_pos, r = radius), inherit.aes = FALSE) + geom_point(size = 2, color = &quot;red&quot;) + geom_text(aes(label = center), vjust = 1.5, hjust= 0.5, size = 5) + coord_fixed(ratio = 1) + theme_void() + theme(legend.position = &quot;none&quot;) } draw_circle(1,2,2) 선, 삼각형, 직사각형도 함수로 만들어서 점의 위치를 넣게 되면 도형을 그리게 되는 함수를 작성한다. "],["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References Kittler, Julius. 2019. “Overview of 40 Mathematical Functions in R.” towards data science. https://towardsdatascience.com/overview-of-40-mathematical-functions-in-r-4b4e138685ff. 김한영. 2020. “양자 알고리즘: 소인수 분해 알고리즘.” HORIZON. https://horizon.kias.re.kr/14195/. "]]
